<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 导入外部文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<!-- 连接池 ：druid -->
	<bean id="druid" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!--基本属性 url username password 驱动 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="${jdbc.maxPoolSize}" />
		<!--配置获取连接的等待超时时间 -->
		<property name="maxWait" value="3000" />
		<!--配置隔多久才进行一次检测，检测需要关闭的空闲连接，但闻是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!--配置一个连接在池中最小空闲的时间 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	</bean>
	
	
	
	<!--SqlSessionFactory 配置： 1、连接池 2、mapper文件信息 3、别名-可选 4、插件-可选 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybiat核心配置文件 <property name="configLocation" value="classpath:configuration.xml"/> -->
		<!--连接池 -->
		<property name="dataSource" ref="druid" />
		<!--mapper文件(如果和dao接口在同包且同名，则如下注入可以省略) -->
		<property name="mapperLocations"
			value="classpath:com/ahf/shiro/mapper/*.xml" />
		<!--别名 -->
		<property name="typeAliasesPackage"
			value="com.ahf.shiro.pojo" />
	</bean>
	<!-- 扫描所有mappper,为每个dao定制实现类，sqlSession.getMapper(UserDao.class) DAO实现的对象会纳入工厂，并且beanID=DAO的首字母小写接口类名 
		如 useDao 1、DAO接口 2、DAO映射文件 3、SqlSession -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 如果当前工厂中 只有一个SqlSessionFactory,则此项注入可以省略 -->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory04"/> -->
		<!-- DAO接口位置 -->
		<!--<property name="basePackage" value="com.qianfeng.dao,com.qianfeng2.dao2"/> -->
		<property name="basePackage" value="com.ahf.shiro.dao" />
	</bean>


	<!-- 事务管理 -->
	<!-- 事务管理器 -->
	<bean id="tx"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druid"></property>
	</bean>
	<!--支持注解事务 -->
	<tx:annotation-driven transaction-manager="tx" />

	<!-- 配置注解扫描：让spring去发现注解，进而实现对应的功能 -->
	<context:component-scan base-package="com.ahf">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller"></context:exclude-filter>
	</context:component-scan>

	<!-- 支持Aspectj方式的AOP定制 -->
	<aop:aspectj-autoproxy />
	
	
	
	<!--加载其他的配置文件  -->
	<import resource="classpath:shiro_applicationContext.xml"/>
	
</beans>
